install.packages(“rmarkdown”)
library(rmarkdown)
install.packages("rmarkdown")
rmarkdown::render()
rmarkdown::render(markdown.rmd)
getwd()
ls
-ls
ls()
ls()
dir()
setwd(diet_data)
setwd("diet_data")
list.files("diet_data")
setwd("..")
ls()
dir()
list.files(diet_data)
list.files("diet_data")
andy <- read.csv("diet_data/Andy.csv")
head(andy)
?help
legnth(andy$Day)
length(andy$Day)
length(andy$Weight)
tail(andy)
dim(andy)
str(andy)
?str
summary(andy)
names(andy)
andy[1, "Weight"]
andy[30, "Weight"]
andy[which(andy$Day==30), "Weight"]
andy[which(andy[,"Day"]==30), "Weight"]
subset(andy$Weight, andy$Day==30)
andy_start <- andy[1, "Weight"]
andy_end <- andy[30, "Weight"]
andy_loss <- andy_start - andy_end
andy_loss
files <- list.files("diet data")
files
files[1]
files[2]
files[3:5]
head(read.csv(files[3]))
files_full <- list.files("diet data", full.names="TRUE")
files_full
head(read.csv(files_full[3]))
dir()
files_full <- list.files("diet_data", full.names="TRUE")
files_full
files <- list.files("diet_data")
files
head(read.csv(files_full[3]))
andy_david <- rbing(andy, read.csv(files_full[2]))
andy_david <- rbind(andy, read.csv(files_full[2]))
head(andy_david)
tail(andy_david)
day_25 <- andy_david[which(andy_david$Day==25), ]
day_25
for (I in 1:5) {print(i)}
for (i in 1:5) {print(i)}
for (i in 1:5){}
for (i in 1:5){
dat <- rbind(dat, read.csv(files_full[i]))
}
dat <- data.frame()
for (i in 1:5){
dat <- rbind(dat, read.csv(files_full[i]))
}
str(dat)
dim(dat)
for (i in 1:5){
dat2 <- data.frame()
dat2 <- rbind(dat2, read.csv(files_full[i]))
}
str(dat2)
median(dat$Weight)
dat
?median
median(dat$Weight na.rm=TRUE)
median(dat$Weight, na.rm=TRUE)
dat_30 <- dat[which(dat[, "Day"]==30),]
dat_30
median(dat_30$Weight)
pollutantmean <- function(directory, pollutant, id=1:332){
#Creates a list of files, full.names set to true to get the folder name as well
files_list <- list.files(directory, full.names = TRUE)
#This creates an empty data frame
mydataframe <- data.frame()
#for loop that loops through the files_list, made possible with id
for (i in id){
#Extends the data frame by using rbind to bind the succeeding csv files
mydataframe <- rbind(mydataframe, read.csv(files_list[i]))
}
#takes the mean of pollutant specified from within the dataframe and stores it
#na.rm = TRUE allows us to ignore NA values
resultmean <- mean(mydataframe[, pollutant], na.rm=TRUE)
#Simply returns the result stored
return (resultmean)
}
pollutantmean("specdata", "sulfate", 1:10) #Ans: 4.064128
setwd("197-2/1")
pollutantmean("specdata", "sulfate", 1:10) #Ans: 4.064128
#For this particular sample, I am quite certain that the answer is
#different as opposed to what is shown in the example output given to us
pollutantmean("specdata", "nitrate", 70:72) #Ans: 1.706047
pollutantmean("specdata", "nitrate", 23) #Ans: 1.280833
setwd("..")
setwd("rprog_data_HospData")
getwd()
setwd("1/rprog_data_HospData")
setwd("1")
setwd("rprog_data_ProgHospData")
outcome <- read.csv('outcome-of-care-measures.csv', colClasses = "character")
head(outcome)
outcome <- read.csv('outcome-of-care-measures.csv', colClasses = "character")
head(outcome)
ncol(outcoe)
ncol(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
hist(outcome[, 11], main = "Hospital 30-Day Death (Mortality) Rates from Heart Attack")
hist(outcome[, 11], main = "Hospital 30-Day Death (Mortality) Rates from Heart Attack", xlab = "Deaths")
hist(outcome[, 11], main = "Hospital 30-Day Death (Mortality) Rates from Heart Attack", xlab = "Deaths", col = "skyblue")
#reads and stores contents of the csv file into outcome
outcome <- read.csv('outcome-of-care-measures.csv', colClasses = "character")
#just to check the top contents
head(outcome)
#colClasses were character earlier so need to coerce as numeric column 11
#Since we will be using that specific column
outcome[, 11] <- as.numeric(outcome[, 11])
#rename the main title, changed color to skyblue and renamed the label on x-axis
#this creates a histogram
hist(outcome[, 11], main = "Hospital 30-Day Death (Mortality) Rates from Heart Attack", xlab = "Deaths", col = "skyblue")
setwd("..")
corr <- function(directory, threshold = 0){
#Creates a list of files, full.names set to true to get the folder name as well
files_list <- list.files(directory, full.names = TRUE)
#will create empty vector for storing results later
myvector <- c()
#for loop that loops through the files_list, there are 332 csv files, hence 1:332
for (i in 1:332){
#This creates an empty data frame
mydataframe <- data.frame()
#fills in the empty dataframe with data from the current csv file
mydataframe <- rbind(mydataframe, read.csv(files_list[i]))
#I couldve used my number 2, but in case of independent checking, I used complete.cases
#makes sure the rows/data have both sulfate and nitrate in them
#We will use this as opposed to mydataframe
completedata <- mydataframe[complete.cases(mydataframe),]
#need this to check if it appeases the threshold
rownumber <- nrow(completedata)
#the rownumber indicates how much observations there are
#if the number od observations is enough, we proceed
if (rownumber > threshold){
#Using the cor built-in function as indicated by instructions
#we get the correlation of nitrate and sulfate
correlationresult <- cor(completedata$nitrate, completedata$sulfate)
#store the result of this by concatenating it to myvector
myvector <- c(myvector, correlationresult)
}
}
#returns the result vector
return (myvector)
}
cr <- corr("specdata", 150)
head(cr);summary(cr)
cr <- corr("specdata", 400)
head(cr);summary(cr)
cr <- corr("specdata", 5000)
head(cr);summary(cr);length(cr)
cr <- corr("specdata")
head(cr);summary(cr);length(cr)
#id -> an integer vector
complete <- function(directory, id=1:332){
#Creates a list of files, full.names set to true to get the folder name as well
files_list <- list.files(directory, full.names = TRUE)
#Creates an empty data frame for the final output
finalframe <- data.frame()
#for loop that loops through the files_list, made possible with id
for (i in id){
#recreates empty data frame for evaluation of the next csv file
mydataframe <- data.frame()
#binds the csv file to empty data frame
mydataframe <- rbind(mydataframe, read.csv(files_list[i]))
#compares sulfate and nitrate columns if they both have values that aren't NA
#will be left with a subset that contains both values for both columns
datasubset <- mydataframe[which(!is.na(mydataframe[, "sulfate"]) & !is.na(mydataframe[, "nitrate"])),]
#creates temporary data frame to store the id and num of observations (got by using nrow in datasubset)
tempdf <- data.frame(i, nrow(datasubset))
#rbinds the finalframe and the temporary dataframe
finalframe <- rbind(finalframe, tempdf)
}
#renaming of the columns
colnames(finalframe)[1] <- "id"
colnames(finalframe)[2] <- "nobs"
#returns the result frame
return (finalframe)
}
complete("specdata", 1)
complete("specdata", c(2,4,8,10,12))
complete("specdata", 30:25)
#id -> an integer vector
pollutantmean <- function(directory, pollutant, id=1:332){
#Creates a list of files, full.names set to true to get the folder name as well
files_list <- list.files(directory, full.names = TRUE)
#This creates an empty data frame
mydataframe <- data.frame()
#for loop that loops through the files_list, made possible with id
for (i in id){
#Extends the data frame by using rbind to bind the succeeding csv files
mydataframe <- rbind(mydataframe, read.csv(files_list[i]))
}
#takes the mean of pollutant specified from within the dataframe and stores it
#na.rm = TRUE allows us to ignore NA values
resultmean <- mean(mydataframe[, pollutant], na.rm=TRUE)
#Simply returns the result stored
return (resultmean)
}
pollutantmean("specdata", "sulfate", 1:10) #Ans: 4.064128
#For this particular sample, I am quite certain that the answer is
#different as opposed to what is shown in the example output given to us
pollutantmean("specdata", "nitrate", 70:72) #Ans: 1.706047
pollutantmean("specdata", "nitrate", 23) #Ans: 1.280833
